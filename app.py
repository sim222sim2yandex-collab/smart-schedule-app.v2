import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import io
import os

# Application modules
from data_processor import DataProcessor
from forecasting import DemandForecaster
from genetic_algorithm import ScheduleOptimizer
from visualization import VisualizationManager
from utils import ExportManager

# Configure page
st.set_page_config(
    page_title="–£–º–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–µ–π",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

def main():
    st.title("üè• –£–º–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–µ–π")
    st.markdown("–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    
    # Initialize session state
    if 'data_loaded' not in st.session_state:
        st.session_state.data_loaded = False
    if 'forecasts_ready' not in st.session_state:
        st.session_state.forecasts_ready = False
    if 'optimization_complete' not in st.session_state:
        st.session_state.optimization_complete = False
    
    # Sidebar for navigation and parameters
    with st.sidebar:
        st.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
        phase = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∑—É",
            ["–§–∞–∑–∞ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–§–∞–∑–∞ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π", "–§–∞–∑–∞ 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"]
        )
        
        st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
        population_size = st.slider("–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏", 50, 500, 200)
        generations = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π", 10, 100, 50)
        mutation_rate = st.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º—É—Ç–∞—Ü–∏–∏", 0.01, 0.3, 0.1)
        crossover_rate = st.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è", 0.5, 0.9, 0.8)
        
        st.header("–í–µ—Å–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤")
        weight_demand = st.slider("–í–µ—Å —Å–ø—Ä–æ—Å–∞", 0.0, 1.0, 0.3)
        weight_revenue = st.slider("–í–µ—Å –≤—ã—Ä—É—á–∫–∏", 0.0, 1.0, 0.25)
        weight_reliability = st.slider("–í–µ—Å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏", 0.0, 1.0, 0.2)
        weight_strategy = st.slider("–í–µ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", 0.0, 1.0, 0.15)
        weight_personnel = st.slider("–í–µ—Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞", 0.0, 1.0, 0.1)
    
    # Main content area
    if phase == "–§–∞–∑–∞ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
        phase1_data_preparation()
    elif phase == "–§–∞–∑–∞ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π":
        phase2_schedule_generation(population_size)
    elif phase == "–§–∞–∑–∞ 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è":
        phase3_optimization(population_size, generations, mutation_rate, crossover_rate,
                          weight_demand, weight_revenue, weight_reliability, weight_strategy, weight_personnel)
    else:
        results_visualization()

def phase1_data_preparation():
    st.header("–§–∞–∑–∞ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
        
        # File uploaders for reference data
        doctors_file = st.file_uploader("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≤—Ä–∞—á–µ–π", type=['csv', 'xlsx'])
        cabinets_file = st.file_uploader("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤", type=['csv', 'xlsx'])
        appointments_file = st.file_uploader("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π", type=['csv', 'xlsx'])
        revenue_file = st.file_uploader("–û—Ç—á–µ—Ç –ø–æ –¥–æ—Ö–æ–¥–∞–º", type=['csv', 'xlsx'])
        seasonal_file = st.file_uploader("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤", type=['csv', 'xlsx'])
        promo_file = st.file_uploader("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∞–∫—Ü–∏–π", type=['csv', 'xlsx'])
        
        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            if all([doctors_file, cabinets_file, appointments_file, revenue_file, seasonal_file, promo_file]):
                try:
                    processor = DataProcessor()
                    
                    # Process uploaded files
                    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
                        doctors_df = processor.load_file(doctors_file)
                        cabinets_df = processor.load_file(cabinets_file)
                        appointments_df = processor.load_file(appointments_file)
                        revenue_df = processor.load_file(revenue_file)
                        seasonal_df = processor.load_file(seasonal_file)
                        promo_df = processor.load_file(promo_file)
                        
                        # Validate and clean data
                        validation_results = processor.validate_data_structure(
                            doctors_df, cabinets_df, appointments_df, revenue_df,
                            seasonal_df, promo_df
                        )
                        
                        if validation_results['valid']:
                            cleaned_data = processor.clean_data(
                                doctors_df, cabinets_df, appointments_df, revenue_df,
                                seasonal_df, promo_df
                            )
                            
                            # Store in session state
                            st.session_state.doctors_df = cleaned_data['doctors']
                            st.session_state.cabinets_df = cleaned_data['cabinets']
                            st.session_state.appointments_df = cleaned_data['appointments']
                            st.session_state.revenue_df = cleaned_data['revenue']
                            st.session_state.seasonal_df = cleaned_data['seasonal']
                            st.session_state.promo_df = cleaned_data['promo']
                            st.session_state.data_loaded = True
                            
                            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
                        else:
                            st.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {validation_results['errors']}")
                            
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —á–µ—Ç—ã—Ä–µ —Ñ–∞–π–ª–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤")
    
    with col2:
        if st.session_state.data_loaded:
            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            # Display data statistics
            col2a, col2b, col2c = st.columns(3)
            with col2a:
                st.metric("–í—Ä–∞—á–∏", len(st.session_state.doctors_df))
                st.metric("–ö–∞–±–∏–Ω–µ—Ç—ã", len(st.session_state.cabinets_df))
            with col2b:
                st.metric("–ó–∞–ø–∏—Å–∏", len(st.session_state.appointments_df))
                st.metric("–û—Ç—á–µ—Ç—ã –¥–æ—Ö–æ–¥–æ–≤", len(st.session_state.revenue_df))
            with col2c:
                st.metric("–°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", len(st.session_state.seasonal_df))
                st.metric("–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∞–∫—Ü–∏–∏", len(st.session_state.promo_df))
            
            # Show sample data
            st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
            data_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫", 
                                   ["–í—Ä–∞—á–∏", "–ö–∞–±–∏–Ω–µ—Ç—ã", "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π", "–î–æ—Ö–æ–¥—ã", 
                                    "–°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∞–∫—Ü–∏–∏"])
            
            if data_type == "–í—Ä–∞—á–∏":
                st.dataframe(st.session_state.doctors_df.head())
            elif data_type == "–ö–∞–±–∏–Ω–µ—Ç—ã":
                st.dataframe(st.session_state.cabinets_df.head())
            elif data_type == "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π":
                st.dataframe(st.session_state.appointments_df.head())
            elif data_type == "–î–æ—Ö–æ–¥—ã":
                st.dataframe(st.session_state.revenue_df.head())
            elif data_type == "–°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã":
                st.dataframe(st.session_state.seasonal_df.head())
            else:
                st.dataframe(st.session_state.promo_df.head())
    
    if st.session_state.data_loaded:
        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞")
        
        col3, col4 = st.columns(2)
        
        with col3:
            st.write("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:")
            forecast_months = st.slider("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–º–µ—Å—è—Ü—ã)", 1, 6, 1)
            seasonal_coef = st.number_input("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏", 0.5, 2.0, 1.2)
            promo_coef = st.number_input("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ü–∏–π", 0.5, 2.0, 1.1)
            buffer_coef = st.number_input("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±—É—Ñ–µ—Ä–∞", 1.0, 1.5, 1.2)
            
            if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"):
                try:
                    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞..."):
                        forecaster = DemandForecaster()
                        
                        # Generate forecasts
                        demand_forecast = forecaster.forecast_demand(
                            st.session_state.appointments_df,
                            forecast_months,
                            seasonal_coef,
                            promo_coef,
                            buffer_coef
                        )
                        
                        financial_metrics = forecaster.calculate_financial_metrics(
                            st.session_state.revenue_df,
                            st.session_state.appointments_df
                        )
                        
                        # Store forecasts
                        st.session_state.demand_forecast = demand_forecast
                        st.session_state.financial_metrics = financial_metrics
                        st.session_state.forecasts_ready = True
                        
                        st.success("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        
        with col4:
            if st.session_state.forecasts_ready:
                st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:")
                
                # Display forecast summary
                forecast_summary = st.session_state.demand_forecast.groupby('service').agg({
                    'predicted_demand': 'sum',
                    'dms_demand': 'sum'
                }).reset_index()
                
                st.dataframe(forecast_summary)
                
                # Visualization of forecast
                fig = px.line(
                    st.session_state.demand_forecast,
                    x='date',
                    y='predicted_demand',
                    color='service',
                    title='–ü—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞ –ø–æ —É—Å–ª—É–≥–∞–º'
                )
                st.plotly_chart(fig, use_container_width=True)

def phase2_schedule_generation(population_size):
    st.header("–§–∞–∑–∞ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
    
    if not st.session_state.forecasts_ready:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –§–∞–∑—É 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        target_month = st.date_input("–¶–µ–ª–µ–≤–æ–π –º–µ—Å—è—Ü", datetime.now().replace(day=1))
        
        # Hard constraints configuration
        st.write("–ñ–µ—Å—Ç–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:")
        enforce_shifts = st.checkbox("–°–æ–±–ª—é–¥–µ–Ω–∏–µ —Å–º–µ–Ω", value=True, disabled=True)
        enforce_specializations = st.checkbox("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π", value=True, disabled=True)
        enforce_star_schedules = st.checkbox("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ '–∑–≤–µ–∑–¥'", value=True, disabled=True)
        enforce_cabinet_bindings = st.checkbox("–ñ–µ—Å—Ç–∫–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–∞–±–∏–Ω–µ—Ç–∞–º", value=True, disabled=True)
        
        if st.button("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ø—É–ª—è—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"):
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
                log_container = st.empty()
                logs = []
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                progress_bar = st.progress(0)
                progress_text = st.empty()
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
                def update_log(message):
                    logs.append(f"[{datetime.now().strftime('%H:%M:%S')}] {message}")
                    log_container.text_area("–õ–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞", "\n".join(logs), height=200)
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                def update_progress(percent, text):
                    progress_bar.progress(int(percent) / 100.0)
                    progress_text.text(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {text}")
                
                update_log("–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...")
                update_progress(0, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
                
                from schedule_generator import ScheduleGenerator
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                update_log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...")
                update_progress(10, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                
                with st.spinner(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {population_size} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π..."):
                    update_log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...")
                    update_progress(20, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞")
                    
                    generator = ScheduleGenerator(
                        st.session_state.doctors_df,
                        st.session_state.cabinets_df,
                        st.session_state.demand_forecast
                    )
                    
                    # Generate population
                    update_log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...")
                    update_progress(30, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏")
                    
                    population = []
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Å—É—Ä—Å–æ–≤
                    generated_population = generator.generate_population(
                        population_size, target_month, 
                        enforce_shifts, enforce_specializations, 
                        enforce_star_schedules, enforce_cabinet_bindings
                    )
                    
                    if generated_population:
                        population.extend(generated_population)
                        update_log(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(population)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Å—É—Ä—Å–æ–≤.")
                    else:
                        update_log("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Å—É—Ä—Å–æ–≤.")

                    update_log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                    update_progress(95, "–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è")
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    if population and generator._is_valid_schedule(population[0]): # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–æ–ø—É–ª—è—Ü–∏–∏
                        st.session_state.population = population
                        st.session_state.population_generated = True
                        update_log(f"–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(population)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.")
                        st.success(f"–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(population)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.")
                    else:
                        st.session_state.population = []
                        st.session_state.population_generated = False
                        update_log("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –ª–æ–≥–∏ –≤—ã—à–µ.")
                        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")

                    update_progress(100, "–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {str(e)}")
    
    with col2:
        if hasattr(st.session_state, 'population_generated') and st.session_state.population_generated:
            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ü–∏–∏")
            
            # Population statistics
            st.metric("–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏", len(st.session_state.population))
            
            # Sample chromosome visualization
            st.write("–ü—Ä–∏–º–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—Ö—Ä–æ–º–æ—Å–æ–º–∞ #1):")
            if len(st.session_state.population) > 0:
                sample_schedule = st.session_state.population[0]
                
                # Convert to DataFrame for display
                schedule_df = pd.DataFrame([
                    {
                        '–î–µ–Ω—å': gene['day'],
                        '–í—Ä–∞—á': gene['doctor_id'],
                        '–ö–∞–±–∏–Ω–µ—Ç': gene['cabinet_id'],
                        '–°–º–µ–Ω–∞': gene['shift'],
                        '–ß–∞—Å—ã': f"{gene['start_time']}-{gene['end_time']}"
                    }
                    for gene in sample_schedule[:10]  # Show first 10 genes
                ])
                
                st.dataframe(schedule_df)
                
                # Validation status
                st.write("–°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
                validation_info = generator.validate_schedule(st.session_state.population[0])
                
                for constraint, status in validation_info.items():
                    if status:
                        st.success(f"‚úÖ {constraint}")
                    else:
                        st.error(f"‚ùå {constraint}")

def phase3_optimization(population_size, generations, mutation_rate, crossover_rate,
                       weight_demand, weight_revenue, weight_reliability, weight_strategy, weight_personnel):
    st.header("–§–∞–∑–∞ 3: –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    
    if not hasattr(st.session_state, 'population_generated') or not st.session_state.population_generated:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –§–∞–∑—É 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
        return
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        # Display current parameters
        params_df = pd.DataFrame({
            '–ü–∞—Ä–∞–º–µ—Ç—Ä': ['–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏', '–ü–æ–∫–æ–ª–µ–Ω–∏—è', '–ú—É—Ç–∞—Ü–∏—è', '–°–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ'],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [population_size, generations, mutation_rate, crossover_rate]
        })
        st.dataframe(params_df)
        
        # Display weights
        weights_df = pd.DataFrame({
            '–ö—Ä–∏—Ç–µ—Ä–∏–π': ['–°–ø—Ä–æ—Å', '–í—ã—Ä—É—á–∫–∞', '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å', '–°—Ç—Ä–∞—Ç–µ–≥–∏—è', '–ü–µ—Ä—Å–æ–Ω–∞–ª'],
            '–í–µ—Å': [weight_demand, weight_revenue, weight_reliability, weight_strategy, weight_personnel]
        })
        st.dataframe(weights_df)
        
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"):
            optimize_schedules(population_size, generations, mutation_rate, crossover_rate,
                             weight_demand, weight_revenue, weight_reliability, weight_strategy, weight_personnel)
    
    with col2:
        if hasattr(st.session_state, 'evolution_history'):
            st.subheader("–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            
            # Evolution progress chart
            if len(st.session_state.evolution_history) > 0:
                evolution_df = pd.DataFrame(st.session_state.evolution_history)
                
                fig = px.line(
                    evolution_df,
                    x='generation',
                    y=['best_fitness', 'avg_fitness'],
                    title='–≠–≤–æ–ª—é—Ü–∏—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏'
                )
                fig.update_layout(
                    xaxis_title="–ü–æ–∫–æ–ª–µ–Ω–∏–µ",
                    yaxis_title="–ü—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å"
                )
                st.plotly_chart(fig, use_container_width=True)
                
                # Current best fitness
                current_best = max(st.session_state.evolution_history, key=lambda x: x['best_fitness'])
                st.metric("–õ—É—á—à–∞—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å", f"{current_best['best_fitness']:.4f}")
                
                # Convergence analysis
                if len(st.session_state.evolution_history) >= 10:
                    recent_improvements = [
                        st.session_state.evolution_history[i]['best_fitness'] - 
                        st.session_state.evolution_history[i-1]['best_fitness']
                        for i in range(-5, 0)
                    ]
                    avg_improvement = np.mean(recent_improvements)
                    
                    if avg_improvement < 0.001:
                        st.info("üîÑ –ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –æ–ø—Ç–∏–º—É–º—É")
                    else:
                        st.info("üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")

def optimize_schedules(population_size, generations, mutation_rate, crossover_rate,
                      weight_demand, weight_revenue, weight_reliability, weight_strategy, weight_personnel):
    """Run the genetic algorithm optimization"""
    
    try:
        optimizer = ScheduleOptimizer(
            st.session_state.doctors_df,
            st.session_state.cabinets_df,
            st.session_state.appointments_df,
            st.session_state.revenue_df,
            st.session_state.demand_forecast,
            st.session_state.financial_metrics
        )
        
        # Set fitness weights
        weights = {
            'demand': weight_demand,
            'revenue': weight_revenue,
            'reliability': weight_reliability,
            'strategy': weight_strategy,
            'personnel': weight_personnel
        }
        
        # Initialize progress tracking
        st.session_state.evolution_history = []
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Run optimization
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è..."):
            best_schedule, evolution_stats = optimizer.optimize(
                st.session_state.population,
                generations,
                mutation_rate,
                crossover_rate,
                weights,
                callback=lambda gen, stats: update_progress(gen, generations, stats, progress_bar, status_text)
            )
            
            # Store results
            st.session_state.best_schedule = best_schedule
            st.session_state.evolution_stats = evolution_stats
            st.session_state.optimization_complete = True
            
            st.success("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # Display final results
            final_fitness = evolution_stats[-1]['best_fitness']
            st.metric("–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å", f"{final_fitness:.4f}")
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}")

def update_progress(generation, total_generations, stats, progress_bar, status_text):
    """Update progress during optimization"""
    progress = generation / total_generations
    progress_bar.progress(progress)
    
    # Correctly access stats
    best_fitness = stats.get('max', 0.0)
    avg_fitness = stats.get('avg', 0.0)
    population_size = stats.get('population_size', 'N/A')
    invalid_individuals_count = stats.get('invalid_individuals_count', 'N/A')
    crossover_applied_count = stats.get('crossover_applied_count', 'N/A')
    mutation_applied_count = stats.get('mutation_applied_count', 'N/A')
    
    status_text.text(f"–ü–æ–∫–æ–ª–µ–Ω–∏–µ {generation}/{total_generations} - –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_fitness:.4f} | –ü–æ–ø—É–ª—è—Ü–∏—è: {population_size} | –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ: {invalid_individuals_count} | –°–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è: {crossover_applied_count} | –ú—É—Ç–∞—Ü–∏–∏: {mutation_applied_count}")
    
    # Store evolution history
    if 'evolution_history' not in st.session_state:
        st.session_state.evolution_history = []
    
    st.session_state.evolution_history.append({
        'generation': generation,
        'best_fitness': best_fitness,
        'avg_fitness': avg_fitness,
        'population_size': population_size,
        'invalid_individuals_count': invalid_individuals_count,
        'crossover_applied_count': crossover_applied_count,
        'mutation_applied_count': mutation_applied_count
    })

def results_visualization():
    st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    
    if not st.session_state.optimization_complete:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤ –§–∞–∑–µ 3")
        return
    
    # Initialize visualization manager
    viz_manager = VisualizationManager()
    export_manager = ExportManager()
    
    # Tab structure for different views
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", 
        "üë®‚Äç‚öïÔ∏è –ü–æ –≤—Ä–∞—á–∞–º", 
        "üè¢ –ü–æ –∫–∞–±–∏–Ω–µ—Ç–∞–º", 
        "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
    ])
    
    with tab1:
        st.subheader("–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        
        # Month selection
        target_month = st.session_state.target_month
        
        # Calendar visualization
        calendar_fig = viz_manager.create_calendar_view(
            st.session_state.best_schedule,
            target_month
        )
        st.plotly_chart(calendar_fig, use_container_width=True)
        
        # Daily schedule details
        selected_date = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", target_month)
        
        daily_schedule = viz_manager.get_daily_schedule(
            st.session_state.best_schedule,
            selected_date
        )
        
        if not daily_schedule.empty:
            st.dataframe(daily_schedule, use_container_width=True)
        else:
            st.info("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    with tab2:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ –≤—Ä–∞—á–∞–º")
        
        # Doctor workload analysis
        doctor_workload = viz_manager.analyze_doctor_workload(
            st.session_state.best_schedule,
            st.session_state.doctors_df
        )
        
        # Workload distribution chart
        fig_workload = px.bar(
            doctor_workload,
            x='doctor_name',
            y='total_hours',
            color='specialty',
            title='–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ä–∞—á–µ–π (—á–∞—Å—ã –≤ –º–µ—Å—è—Ü)'
        )
        fig_workload.update_xaxes(tickangle=45)
        st.plotly_chart(fig_workload, use_container_width=True)
        
        # Doctor details table
        st.dataframe(doctor_workload, use_container_width=True)
    
    with tab3:
        st.subheader("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–æ–≤")
        
        # Cabinet utilization analysis
        cabinet_utilization = viz_manager.analyze_cabinet_utilization(
            st.session_state.best_schedule,
            st.session_state.cabinets_df
        )
        
        # Utilization heatmap
        fig_util = px.imshow(
            cabinet_utilization.pivot(index='cabinet_name', columns='day_of_week', values='utilization_rate'),
            title='–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (%)',
            color_continuous_scale='RdYlGn'
        )
        st.plotly_chart(fig_util, use_container_width=True)
        
        # Cabinet details table
        st.dataframe(cabinet_utilization, use_container_width=True)
    
    with tab4:
        st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ KPI")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏**")
            
            # Calculate financial metrics
            financial_analysis = viz_manager.calculate_financial_impact(
                st.session_state.best_schedule,
                st.session_state.financial_metrics,
                st.session_state.demand_forecast
            )
            
            st.metric("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞", f"‚ÇΩ{financial_analysis['total_revenue']:,.0f}")
            st.metric("–ü–æ–∫—Ä—ã—Ç–∏–µ —Å–ø—Ä–æ—Å–∞", f"{financial_analysis['demand_coverage']:.1%}")
            st.metric("–°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Ä–∞—á–µ–π", f"{financial_analysis['avg_doctor_utilization']:.1%}")
            
        with col2:
            st.write("**–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏**")
            
            quality_metrics = viz_manager.calculate_quality_metrics(
                st.session_state.best_schedule,
                st.session_state.doctors_df
            )
            
            st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏", f"{quality_metrics['reliability_score']:.3f}")
            st.metric("–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –±–∞–ª–ª", f"{quality_metrics['strategy_score']:.3f}")
            st.metric("–ë–∞–ª–∞–Ω—Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞", f"{quality_metrics['personnel_balance']:.3f}")
        
        # Demand vs Supply analysis
        st.subheader("–ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–æ—Å–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        
        demand_supply = viz_manager.analyze_demand_supply_balance(
            st.session_state.best_schedule,
            st.session_state.demand_forecast
        )
        
        fig_demand = px.line(
            demand_supply,
            x='date',
            y=['demand', 'supply'],
            title='–ë–∞–ª–∞–Ω—Å —Å–ø—Ä–æ—Å–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
        )
        st.plotly_chart(fig_demand, use_container_width=True)
        
        # Export options
        st.subheader("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        col3, col4, col5 = st.columns(3)
        
        with col3:
            if st.button("–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"):
                excel_buffer = export_manager.export_to_excel(
                    st.session_state.best_schedule,
                    financial_analysis,
                    quality_metrics,
                    doctor_workload,
                    cabinet_utilization
                )
                
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å Excel –æ—Ç—á–µ—Ç",
                    data=excel_buffer,
                    file_name=f"schedule_report_{datetime.now().strftime('%Y%m%d')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
        
        with col4:
            if st.button("–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"):
                csv_buffer = export_manager.export_to_csv(st.session_state.best_schedule)
                
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª",
                    data=csv_buffer,
                    file_name=f"schedule_{datetime.now().strftime('%Y%m%d')}.csv",
                    mime="text/csv"
                )
        
        with col5:
            if st.button("–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"):
                analytics_buffer = export_manager.export_analytics(
                    financial_analysis,
                    quality_metrics,
                    st.session_state.evolution_history
                )
                
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É",
                    data=analytics_buffer,
                    file_name=f"analytics_{datetime.now().strftime('%Y%m%d')}.json",
                    mime="application/json"
                )

if __name__ == "__main__":
    main()
