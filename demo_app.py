#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≤—Ä–∞—á–µ–π
–ó–∞–ø—É—Å–∫: python3 demo_app.py
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from schedule_generator import ScheduleGenerator
from genetic_algorithm import ScheduleOptimizer
from fitness_evaluator import FitnessEvaluator

def main():
    print("üè• –î–ï–ú–û: –°–∏—Å—Ç–µ–º–∞ —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Ä–∞—á–µ–π")
    print("=" * 50)
    
    # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    doctors_df = pd.DataFrame({
        'doctor_id': [1, 2, 3],
        'name': ['–ò–≤–∞–Ω–æ–≤ –ò.–ò.', '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.', '–°–∏–¥–æ—Ä–æ–≤ –°.–°.'],
        'specialty': ['—Ç–µ—Ä–∞–ø–µ–≤—Ç', '–∫–∞—Ä–¥–∏–æ–ª–æ–≥', '–ø–µ–¥–∏–∞—Ç—Ä'],
        'shift_type': ['day', 'day', 'day'],
        'is_star': [False, False, False],  # –ë–µ–∑ –∑–≤–µ–∑–¥–Ω—ã—Ö –≤—Ä–∞—á–µ–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        'experience_years': [5, 7, 3]
    })
    
    cabinets_df = pd.DataFrame({
        'cabinet_id': [101, 102, 103],
        'cabinet_name': ['–¢–µ—Ä–∞–ø–∏—è', '–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è', '–ü–µ–¥–∏–∞—Ç—Ä–∏—è'],
        'specialty_allowed': [['—Ç–µ—Ä–∞–ø–µ–≤—Ç'], ['–∫–∞—Ä–¥–∏–æ–ª–æ–≥'], ['–ø–µ–¥–∏–∞—Ç—Ä']]
    })
    
    appointments_df = pd.DataFrame({
        'doctor_id': [1, 2, 3] * 30,
        'service_name': ['–ø—Ä–∏–µ–º —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞', '–ø—Ä–∏–µ–º –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞', '–ø—Ä–∏–µ–º –ø–µ–¥–∏–∞—Ç—Ä–∞'] * 30,
        'cost': [1500, 2000, 1800] * 30
    })
    
    revenue_df = pd.DataFrame({
        'doctor_id': [1, 2, 3],
        'total_revenue': [150000, 180000, 120000],
        'appointments_count': [100, 90, 80]
    })
    
    demand_forecast = pd.DataFrame({
        'date': [datetime.now().strftime('%Y-%m-%d')] * 3,
        'service': ['–ø—Ä–∏–µ–º —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞', '–ø—Ä–∏–µ–º –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞', '–ø—Ä–∏–µ–º –ø–µ–¥–∏–∞—Ç—Ä–∞'],
        'predicted_demand': [6, 4, 5],
        'dms_demand': [2, 2, 1]
    })
    
    financial_metrics = pd.DataFrame({
        'doctor_id': [1, 2, 3],
        'avg_appointment_cost': [1500, 2000, 1800],
        'fill_rate': [0.8, 0.85, 0.75],
        'reliability_coefficient': [0.9, 0.95, 0.85],
        'service_diversity': [3, 2, 3]
    })
    
    print("üìä –î–∞–Ω–Ω—ã–µ:")
    print(f"   –í—Ä–∞—á–∏: {len(doctors_df)}")
    print(f"   –ö–∞–±–∏–Ω–µ—Ç—ã: {len(cabinets_df)}")
    print(f"   –î–Ω–µ–≤–Ω–æ–π —Å–ø—Ä–æ—Å: {demand_forecast['predicted_demand'].sum()}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
    print("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...")
    generator = ScheduleGenerator(doctors_df, cabinets_df, demand_forecast)
    population = generator.generate_population(5, datetime.now().replace(day=1))
    
    if not population:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        return
    
    print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(population)} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
    print(f"   üìã –†–∞–∑–º–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {len(population[0])} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    print("\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è:")
    validation = generator.validate_schedule(population[0])
    for constraint, status in validation.items():
        icon = "‚úÖ" if status else "‚ùå"
        print(f"   {icon} {constraint}")
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏
    print("\nüìà –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏:")
    evaluator = FitnessEvaluator(
        doctors_df, cabinets_df, appointments_df,
        revenue_df, demand_forecast, financial_metrics
    )
    
    weights = {'demand': 0.3, 'revenue': 0.25, 'reliability': 0.2, 'strategy': 0.15, 'personnel': 0.1}
    
    for i, schedule in enumerate(population):
        fitness = evaluator.evaluate_fitness(schedule, weights)
        print(f"   –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {i+1}: {fitness:.4f}")
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    print("\nüß¨ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (5 –ø–æ–∫–æ–ª–µ–Ω–∏–π)...")
    optimizer = ScheduleOptimizer(
        doctors_df, cabinets_df, appointments_df,
        revenue_df, demand_forecast, financial_metrics
    )
    
    best_schedule, evolution_history = optimizer.optimize(
        population, generations=5, mutation_rate=0.1, crossover_rate=0.8, weights=weights
    )
    
    final_fitness = evaluator.evaluate_fitness(best_schedule, weights)
    print(f"   ‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å: {final_fitness:.4f}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìã –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
    breakdown = evaluator.get_fitness_breakdown(best_schedule, weights)
    
    for component, score in breakdown['raw_scores'].items():
        print(f"   {component:12}: {score:.3f}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ä–∞—á–µ–π
    print("\nüë®‚Äç‚öïÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ä–∞—á–µ–π:")
    doctor_workload = {}
    for gene in best_schedule:
        doctor_id = gene['doctor_id']
        doctor_workload[doctor_id] = doctor_workload.get(doctor_id, 0) + 1
    
    for doctor_id, count in doctor_workload.items():
        doctor_name = doctors_df[doctors_df['doctor_id'] == doctor_id]['name'].iloc[0]
        specialty = doctors_df[doctors_df['doctor_id'] == doctor_id]['specialty'].iloc[0]
        print(f"   {doctor_name} ({specialty}): {count} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π")
    
    # –ü–æ–∫—Ä—ã—Ç–∏–µ —Å–ø—Ä–æ—Å–∞
    print("\nüìä –ü–æ–∫—Ä—ã—Ç–∏–µ —Å–ø—Ä–æ—Å–∞ (–º–µ—Å—è—á–Ω–æ–µ):")
    services_count = {}
    for gene in best_schedule:
        service = gene.get('service', 'unknown')
        services_count[service] = services_count.get(service, 0) + 1
    
    working_days = len(set(gene['day'] for gene in best_schedule))
    
    for _, row in demand_forecast.iterrows():
        service = row['service']
        daily_demand = row['predicted_demand']
        monthly_demand = daily_demand * working_days
        supplied = services_count.get(service, 0)
        coverage = (supplied / monthly_demand * 100) if monthly_demand > 0 else 0
        print(f"   {service}: {supplied}/{monthly_demand} ({coverage:.1f}%)")
    
    print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"   –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: {working_days}")
    print(f"   –û–±—â–∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {len(best_schedule)}")
    print(f"   –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ –¥–µ–Ω—å: {len(best_schedule) / working_days:.1f}")

if __name__ == "__main__":
    main()