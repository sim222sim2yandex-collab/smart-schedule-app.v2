#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
–ó–∞–ø—É—Å–∫: python3 test_app.py
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from schedule_generator import ScheduleGenerator
from genetic_algorithm import ScheduleOptimizer
from fitness_evaluator import FitnessEvaluator

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    # –í—Ä–∞—á–∏
    doctors_df = pd.DataFrame({
        'doctor_id': [1, 2, 3, 4, 5],
        'name': ['–ò–≤–∞–Ω–æ–≤ –ò.–ò.', '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.', '–°–∏–¥–æ—Ä–æ–≤ –°.–°.', '–ö–æ–∑–ª–æ–≤–∞ –ö.–ö.', '–ú–æ—Ä–æ–∑–æ–≤–∞ –ú.–ú.'],
        'specialty': ['—Ç–µ—Ä–∞–ø–µ–≤—Ç', '–∫–∞—Ä–¥–∏–æ–ª–æ–≥', '–ø–µ–¥–∏–∞—Ç—Ä', '—Ç–µ—Ä–∞–ø–µ–≤—Ç', '–≥–∏–Ω–µ–∫–æ–ª–æ–≥'],
        'shift_type': ['morning', 'day', 'evening', 'day', 'morning'],
        'is_star': [True, False, False, False, True],
        'experience_years': [10, 5, 8, 3, 12]
    })
    
    # –ö–∞–±–∏–Ω–µ—Ç—ã
    cabinets_df = pd.DataFrame({
        'cabinet_id': [101, 102, 103, 104, 105],
        'cabinet_name': ['–¢–µ—Ä–∞–ø–∏—è 1', '–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è', '–ü–µ–¥–∏–∞—Ç—Ä–∏—è', '–¢–µ—Ä–∞–ø–∏—è 2', '–ì–∏–Ω–µ–∫–æ–ª–æ–≥–∏—è'],
        'specialty_allowed': [['—Ç–µ—Ä–∞–ø–µ–≤—Ç'], ['–∫–∞—Ä–¥–∏–æ–ª–æ–≥'], ['–ø–µ–¥–∏–∞—Ç—Ä'], ['—Ç–µ—Ä–∞–ø–µ–≤—Ç', '–≥–∏–Ω–µ–∫–æ–ª–æ–≥'], ['–≥–∏–Ω–µ–∫–æ–ª–æ–≥']]
    })
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–∞–ø–∏—Å–∏
    appointments_df = pd.DataFrame({
        'doctor_id': [1, 2, 3, 1, 2, 3, 4, 5] * 20,
        'service_name': ['–ø—Ä–∏–µ–º —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞', '–ø—Ä–∏–µ–º –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞', '–ø—Ä–∏–µ–º –ø–µ–¥–∏–∞—Ç—Ä–∞', 
                        '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞', '–∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä', '–¥–µ—Ç—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä',
                        '–ø—Ä–∏–µ–º —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞', '–ø—Ä–∏–µ–º –≥–∏–Ω–µ–∫–æ–ª–æ–≥–∞'] * 20,
        'cost': [1500, 2000, 1800, 1200, 2200, 1600, 1500, 2500] * 20,
        'date': [datetime.now() - timedelta(days=x) for x in range(160)]
    })
    
    # –î–æ—Ö–æ–¥—ã
    revenue_df = pd.DataFrame({
        'doctor_id': [1, 2, 3, 4, 5],
        'total_revenue': [200000, 150000, 180000, 120000, 160000],
        'appointments_count': [120, 80, 100, 90, 70]
    })
    
    # –ü—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞
    demand_forecast = pd.DataFrame({
        'date': [datetime.now().strftime('%Y-%m-%d')] * 5,
        'service': ['–ø—Ä–∏–µ–º —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞', '–ø—Ä–∏–µ–º –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞', '–ø—Ä–∏–µ–º –ø–µ–¥–∏–∞—Ç—Ä–∞', 
                   '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞', '–ø—Ä–∏–µ–º –≥–∏–Ω–µ–∫–æ–ª–æ–≥–∞'],
        'predicted_demand': [12, 8, 10, 6, 5],
        'dms_demand': [4, 3, 3, 2, 2]
    })
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    financial_metrics = pd.DataFrame({
        'doctor_id': [1, 2, 3, 4, 5],
        'avg_appointment_cost': [1500, 2000, 1800, 1350, 2300],
        'fill_rate': [0.85, 0.75, 0.90, 0.70, 0.80],
        'reliability_coefficient': [0.95, 0.85, 0.92, 0.78, 0.88],
        'service_diversity': [4, 3, 2, 3, 2]
    })
    
    return doctors_df, cabinets_df, appointments_df, revenue_df, demand_forecast, financial_metrics

def test_schedule_generation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"""
    
    print("üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Ä–∞—á–µ–π")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    doctors_df, cabinets_df, appointments_df, revenue_df, demand_forecast, financial_metrics = create_test_data()
    
    print(f"   –í—Ä–∞—á–∏: {len(doctors_df)}")
    print(f"   –ö–∞–±–∏–Ω–µ—Ç—ã: {len(cabinets_df)}")
    print(f"   –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–∞–ø–∏—Å–∏: {len(appointments_df)}")
    print(f"   –î–Ω–µ–≤–Ω–æ–π —Å–ø—Ä–æ—Å: {demand_forecast['predicted_demand'].sum()}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
    print("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏...")
    generator = ScheduleGenerator(doctors_df, cabinets_df, demand_forecast)
    
    target_month = datetime.now().replace(day=1)
    population_size = 10
    
    population = generator.generate_population(
        population_size, target_month,
        enforce_shifts=True,
        enforce_specializations=True,
        enforce_star_schedules=True,
        enforce_cabinet_bindings=True
    )
    
    print(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(population)}/{population_size} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
    
    if not population:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏...")
    valid_count = 0
    for i, schedule in enumerate(population):
        validation = generator.validate_schedule(schedule)
        is_valid = all(validation.values())
        if is_valid:
            valid_count += 1
        print(f"   –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {i+1}: {'‚úÖ' if is_valid else '‚ùå'} ({len(schedule)} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π)")
    
    print(f"   –í–∞–ª–∏–¥–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {valid_count}/{len(population)}")
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏
    print("\nüìà –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏...")
    evaluator = FitnessEvaluator(
        doctors_df, cabinets_df, appointments_df,
        revenue_df, demand_forecast, financial_metrics
    )
    
    weights = {
        'demand': 0.3,
        'revenue': 0.25,
        'reliability': 0.2,
        'strategy': 0.15,
        'personnel': 0.1
    }
    
    fitness_scores = []
    for i, schedule in enumerate(population):
        fitness = evaluator.evaluate_fitness(schedule, weights)
        fitness_scores.append(fitness)
        print(f"   –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {i+1}: fitness = {fitness:.4f}")
    
    best_idx = np.argmax(fitness_scores)
    print(f"   –õ—É—á—à–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: #{best_idx+1} (fitness = {fitness_scores[best_idx]:.4f})")
    
    # –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    print("\nüß¨ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è...")
    optimizer = ScheduleOptimizer(
        doctors_df, cabinets_df, appointments_df,
        revenue_df, demand_forecast, financial_metrics
    )
    
    try:
        best_schedule, evolution_history = optimizer.optimize(
            population[:5],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ 5 –ª—É—á—à–∏—Ö
            generations=10,
            mutation_rate=0.1,
            crossover_rate=0.8,
            weights=weights
        )
        
        final_fitness = evaluator.evaluate_fitness(best_schedule, weights)
        print(f"   –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"   –ü–æ–∫–æ–ª–µ–Ω–∏–π: {len(evolution_history)}")
        print(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å: {final_fitness:.4f}")
        print(f"   –£–ª—É—á—à–µ–Ω–∏–µ: {final_fitness - fitness_scores[best_idx]:.4f}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
        breakdown = evaluator.get_fitness_breakdown(best_schedule, weights)
        
        print("   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏:")
        for component, score in breakdown['raw_scores'].items():
            weighted = breakdown['weighted_scores'][component]
            print(f"     {component:12}: {score:.3f} (–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π: {weighted:.3f})")
        
        print(f"   –®—Ç—Ä–∞—Ñ–Ω–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {breakdown['penalty_factor']:.3f}")
        
        violations = breakdown['violations']
        total_violations = sum(violations.values())
        if total_violations > 0:
            print(f"   ‚ö†Ô∏è  –ù–∞—Ä—É—à–µ–Ω–∏—è: {total_violations}")
            for violation_type, count in violations.items():
                if count > 0:
                    print(f"     {violation_type}: {count}")
        else:
            print("   ‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–∞—á–∞–º
        print("\nüë®‚Äç‚öïÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ä–∞—á–µ–π:")
        doctor_workload = {}
        for gene in best_schedule:
            doctor_id = gene['doctor_id']
            doctor_workload[doctor_id] = doctor_workload.get(doctor_id, 0) + 1
        
        for doctor_id, appointments in doctor_workload.items():
            doctor_info = doctors_df[doctors_df['doctor_id'] == doctor_id].iloc[0]
            name = doctor_info['name']
            specialty = doctor_info['specialty']
            is_star = '‚≠ê' if doctor_info['is_star'] else ''
            print(f"   {name} ({specialty}){is_star}: {appointments} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π")
        
        print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {len(best_schedule)}")
        print(f"   –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ: {len(set(gene['day'] for gene in best_schedule))}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_schedule_generation()